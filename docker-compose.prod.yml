version: '3.8'

services:
  bot:
    image: ghcr.io/shamspias/KazeBeats:latest
    container_name: KazeBeats
    restart: always
    env_file:
      - .env.production
    volumes:
      - ./logs:/app/logs
      - ./cache:/app/cache
      - ./data:/app/data
      - /etc/localtime:/etc/localtime:ro
    networks:
      - bot-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M
    environment:
      - BOT_ENV=production
      - DATABASE_HOST=db
      - REDIS_HOST=redis
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "10"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  db:
    image: postgres:15-alpine
    container_name: discord-bot-db-prod
    restart: always
    environment:
      POSTGRES_DB_FILE: /run/secrets/db_name
      POSTGRES_USER_FILE: /run/secrets/db_user
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - bot-network
    secrets:
      - db_name
      - db_user
      - db_password
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    command: >
      postgres
      -c max_connections=100
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200

  redis:
    image: redis:7-alpine
    container_name: discord-bot-redis-prod
    restart: always
    command: >
      redis-server
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - bot-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    sysctls:
      - net.core.somaxconn=511

  nginx:
    image: nginx:alpine
    container_name: discord-bot-nginx
    restart: always
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - bot-network
    depends_on:
      - bot
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
    healthcheck:
      test: [ "CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  backup:
    image: postgres:15-alpine
    container_name: discord-bot-backup
    restart: "no"
    networks:
      - bot-network
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    entrypoint: [ "/bin/sh", "/backup.sh" ]
    profiles:
      - backup
    depends_on:
      - db
    environment:
      - PGHOST=db
      - PGUSER=${DATABASE_USER}
      - PGPASSWORD=${DATABASE_PASSWORD}
      - PGDATABASE=${DATABASE_NAME}

  # Monitoring stack
  prometheus:
    image: prom/prometheus:latest
    container_name: discord-bot-prometheus-prod
    restart: always
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - bot-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: discord-bot-grafana-prod
    restart: always
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_password
      - GF_INSTALL_PLUGINS=redis-datasource
      - GF_SERVER_ROOT_URL=https://dashboard.yourdomain.com
    networks:
      - bot-network
    secrets:
      - grafana_password
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    depends_on:
      - prometheus
    profiles:
      - monitoring

  # Log aggregation
  loki:
    image: grafana/loki:latest
    container_name: discord-bot-loki
    restart: always
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - bot-network
    profiles:
      - monitoring

  promtail:
    image: grafana/promtail:latest
    container_name: discord-bot-promtail
    restart: always
    volumes:
      - ./logs:/var/log/bot:ro
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - bot-network
    profiles:
      - monitoring

networks:
  bot-network:
    driver: overlay
    encrypted: true
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  nginx-cache:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  loki-data:
    driver: local

secrets:
  db_name:
    external: true
  db_user:
    external: true
  db_password:
    external: true
  grafana_password:
    external: true